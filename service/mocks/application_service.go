// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/noppawitt/admintools/model"
import repository "github.com/noppawitt/admintools/repository"

// ApplicationService is an autogenerated mock type for the ApplicationService type
type ApplicationService struct {
	mock.Mock
}

// getConnectionString provides a mock function with given fields: application
func (_m *ApplicationService) getConnectionString(application *model.Application) (string, error) {
	ret := _m.Called(application)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.Application) string); ok {
		r0 = rf(application)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Application) error); ok {
		r1 = rf(application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: application
func (_m *ApplicationService) Create(application *model.Application) error {
	ret := _m.Called(application)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Application) error); ok {
		r0 = rf(application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetParameter provides a mock function with given fields: id, name
func (_m *ApplicationService) GetParameter(id int, name string) ([]model.ExternalParameter, error) {
	ret := _m.Called(id, name)

	var r0 []model.ExternalParameter
	if rf, ok := ret.Get(0).(func(int, string) []model.ExternalParameter); ok {
		r0 = rf(id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ExternalParameter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoredProcedure provides a mock function with given fields: id
func (_m *ApplicationService) GetStoredProcedure(id int) ([]model.ExternalStoredProcedure, error) {
	ret := _m.Called(id)

	var r0 []model.ExternalStoredProcedure
	if rf, ok := ret.Get(0).(func(int) []model.ExternalStoredProcedure); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ExternalStoredProcedure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetView provides a mock function with given fields: id
func (_m *ApplicationService) GetView(id int) ([]model.ExternalView, error) {
	ret := _m.Called(id)

	var r0 []model.ExternalView
	if rf, ok := ret.Get(0).(func(int) []model.ExternalView); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ExternalView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo provides a mock function with given fields:
func (_m *ApplicationService) Repo() repository.ApplicationRepository {
	ret := _m.Called()

	var r0 repository.ApplicationRepository
	if rf, ok := ret.Get(0).(func() repository.ApplicationRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ApplicationRepository)
		}
	}

	return r0
}
